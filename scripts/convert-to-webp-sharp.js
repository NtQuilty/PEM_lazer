import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

async function convertToWebP() {
  console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ WebP —Å –ø–æ–º–æ—â—å—é Sharp...');
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PNG —Ñ–∞–π–ª—ã
    const pngFiles = await glob('public/images/**/*.png');
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${pngFiles.length} PNG —Ñ–∞–π–ª–æ–≤`);
    
    let totalSaved = 0;
    
    for (const pngPath of pngFiles) {
      // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è WebP —Ñ–∞–π–ª–∞
      const webpPath = pngPath.replace('.png', '.webp');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const originalSize = fs.statSync(pngPath).size;
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP
      await sharp(pngPath)
        .webp({ 
          quality: 85,   // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
          lossless: false,
          nearLossless: false,
          smartSubsample: true
        })
        .toFile(webpPath);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
      const webpSize = fs.statSync(webpPath).size;
      const savings = Math.round((1 - webpSize / originalSize) * 100);
      const savedKB = Math.round((originalSize - webpSize) / 1024);
      
      totalSaved += savedKB;
      
      const relativePngPath = path.relative('public/images', pngPath);
      const relativeWebpPath = path.relative('public/images', webpPath);
      
      console.log(`  ‚úÖ ${relativePngPath} ‚Üí ${relativeWebpPath} (-${savings}%, -${savedKB}KB)`);
    }
    
    console.log(`\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${Math.round(totalSaved / 1024)} MB`);
    console.log(`\n‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –û–±–Ω–æ–≤–∏—Ç—å –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –∫–æ–¥–µ (.png ‚Üí .webp)`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
  }
}

convertToWebP();
